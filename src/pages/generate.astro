---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Generate URL - DrawCanvas">
  <main class="min-h-screen bg-background py-12 px-4 sm:px-6 lg:px-8">
    <div class="mx-auto max-w-4xl">
      <h1 class="text-4xl font-bold text-foreground mb-2">Generate Canvas URL</h1>
      <p class="text-muted-foreground mb-8">Configure your drawing canvas and generate a shareable URL</p>

      <div class="bg-card border border-border rounded-lg p-6 mb-8">
        <form id="urlForm" class="space-y-6">
          <!-- Brush Size -->
          <div>
            <label for="sizeInput" class="block text-sm font-medium text-foreground mb-2">
              Brush Size (1-50)
            </label>
            <input
              type="number"
              id="sizeInput"
              min="1"
              max="50"
              value="5"
              class="w-full px-4 py-2 bg-secondary border border-border rounded-lg text-foreground focus:outline-none focus:ring-2 focus:ring-primary"
            />
          </div>

          <!-- Colors -->
          <div>
            <label class="block text-sm font-medium text-foreground mb-2">
              Available Colors
            </label>
            <div class="space-y-2">
              <label class="flex items-center gap-2">
                <input type="radio" name="colorMode" value="all" checked class="text-primary" />
                <span class="text-foreground">All default colors (*)</span>
              </label>
              <label class="flex items-center gap-2">
                <input type="radio" name="colorMode" value="custom" class="text-primary" />
                <span class="text-foreground">Custom colors</span>
              </label>
            </div>
            <input
              type="text"
              id="customColors"
              placeholder="#ff0000,#00ff00,#0000ff"
              disabled
              class="mt-2 w-full px-4 py-2 bg-secondary border border-border rounded-lg text-foreground focus:outline-none focus:ring-2 focus:ring-primary disabled:opacity-50"
            />
            <p class="text-xs text-muted-foreground mt-1">Enter comma-separated hex colors</p>
          </div>

          <!-- Eraser -->
          <div>
            <label class="flex items-center gap-2">
              <input type="checkbox" id="eraserCheck" class="text-primary" />
              <span class="text-foreground font-medium">Enable Eraser Tool</span>
            </label>
          </div>

          <!-- Background Image -->
          <div>
            <label for="bgImageInput" class="block text-sm font-medium text-foreground mb-2">
              Background Image URL
            </label>
            <input
              type="url"
              id="bgImageInput"
              placeholder="https://example.com/image.jpg"
              class="w-full px-4 py-2 bg-secondary border border-border rounded-lg text-foreground focus:outline-none focus:ring-2 focus:ring-primary"
            />
            <p class="text-xs text-muted-foreground mt-1">Optional: Add a background image</p>
          </div>

          <!-- Background Opacity -->
          <div>
            <label for="bgOpacityInput" class="block text-sm font-medium text-foreground mb-2">
              Background Opacity (0-100)
            </label>
            <input
              type="number"
              id="bgOpacityInput"
              min="0"
              max="100"
              value="50"
              class="w-full px-4 py-2 bg-secondary border border-border rounded-lg text-foreground focus:outline-none focus:ring-2 focus:ring-primary"
            />
          </div>

          <!-- Generate Button -->
          <button
            type="submit"
            class="w-full px-6 py-3 bg-primary text-primary-foreground rounded-lg font-medium hover:opacity-90 transition-opacity"
          >
            Generate URL
          </button>
        </form>
      </div>

      <!-- Generated URL -->
      <div id="resultSection" class="hidden bg-card border border-border rounded-lg p-6">
        <h2 class="text-xl font-bold text-foreground mb-4">Generated URL</h2>
        
        <div class="bg-secondary rounded-lg p-4 mb-4 overflow-x-auto">
          <code id="generatedUrl" class="text-sm text-foreground break-all"></code>
        </div>

        <div class="flex gap-4">
          <button
            id="copyBtn"
            class="px-6 py-2 bg-primary text-primary-foreground rounded-lg font-medium hover:opacity-90 transition-opacity"
          >
            Copy URL
          </button>
          <a
            id="openBtn"
            href="#"
            target="_blank"
            class="px-6 py-2 bg-secondary text-secondary-foreground rounded-lg font-medium hover:bg-accent transition-colors"
          >
            Open Canvas
          </a>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  const form = document.getElementById('urlForm') as HTMLFormElement;
  const resultSection = document.getElementById('resultSection')!;
  const generatedUrlEl = document.getElementById('generatedUrl')!;
  const copyBtn = document.getElementById('copyBtn')!;
  const openBtn = document.getElementById('openBtn') as HTMLAnchorElement;
  const customColorsInput = document.getElementById('customColors') as HTMLInputElement;
  const colorModeRadios = document.querySelectorAll('input[name="colorMode"]');

  // Enable/disable custom colors input
  colorModeRadios.forEach(radio => {
    radio.addEventListener('change', (e) => {
      const target = e.target as HTMLInputElement;
      customColorsInput.disabled = target.value === 'all';
    });
  });

  form.addEventListener('submit', (e) => {
    e.preventDefault();

    const size = (document.getElementById('sizeInput') as HTMLInputElement).value;
    const colorMode = (document.querySelector('input[name="colorMode"]:checked') as HTMLInputElement).value;
    const customColors = customColorsInput.value;
    const eraserEnabled = (document.getElementById('eraserCheck') as HTMLInputElement).checked;
    const bgImage = (document.getElementById('bgImageInput') as HTMLInputElement).value;
    const bgOpacity = (document.getElementById('bgOpacityInput') as HTMLInputElement).value;

    // Build URL parameters
    const params = new URLSearchParams();
    
    if (size && size !== '5') {
      params.append('size', size);
    }

    if (colorMode === 'all') {
      params.append('colors', '*');
    } else if (customColors) {
      params.append('colors', customColors);
    }

    if (eraserEnabled) {
      params.append('eraser', 'true');
    }

    if (bgImage) {
      params.append('bgImage', bgImage);
      if (bgOpacity && bgOpacity !== '50') {
        params.append('bgOpacity', bgOpacity);
      }
    }

    // Generate URL
    const baseUrl = window.location.origin + window.location.pathname.replace('/generate', '/');
    const fullUrl = params.toString() ? `${baseUrl}?${params.toString()}` : baseUrl;

    // Display result
    generatedUrlEl.textContent = fullUrl;
    openBtn.href = fullUrl;
    resultSection.classList.remove('hidden');

    // Scroll to result
    resultSection.scrollIntoView({ behavior: 'smooth' });
  });

  // Copy to clipboard
  copyBtn.addEventListener('click', async () => {
    const url = generatedUrlEl.textContent || '';
    try {
      await navigator.clipboard.writeText(url);
      copyBtn.textContent = 'Copied!';
      setTimeout(() => {
        copyBtn.textContent = 'Copy URL';
      }, 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  });
</script>
