---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Generate URL - DrawCanvas">
    <main class="min-h-screen bg-background py-12 px-4 sm:px-6 lg:px-8">
        <div class="mx-auto max-w-4xl">
            <h1 class="text-4xl font-bold text-foreground mb-2">Generate Canvas URL</h1>
            <p class="text-muted-foreground mb-8">Configure your drawing canvas and generate a shareable URL</p>

            <div class="bg-card border border-border rounded-lg p-6 mb-8">
                <form id="urlForm" class="space-y-6">
                    <!-- Brush Size -->
                    <div>
                        <label for="sizeInput" class="block text-sm font-medium text-foreground mb-2">
                            Brush Size (1-50)
                        </label>
                        <input
                                type="number"
                                id="sizeInput"
                                min="1"
                                max="50"
                                value="5"
                                class="w-full px-4 py-2 bg-secondary border border-border rounded-lg text-foreground focus:outline-none focus:ring-2 focus:ring-primary"
                        />
                    </div>

                    <!-- Colors -->
                    <div>
                        <label class="block text-sm font-medium text-foreground mb-2">
                            Available Colors
                        </label>
                        <div class="space-y-2">
                            <label class="flex items-center gap-2">
                                <input type="radio" name="colorMode" value="all" checked class="text-primary" />
                                <span class="text-foreground">All default colors (*)</span>
                            </label>
                            <label class="flex items-center gap-2">
                                <input type="radio" name="colorMode" value="custom" class="text-primary" />
                                <span class="text-foreground">Custom colors</span>
                            </label>
                        </div>
                        <input
                                type="text"
                                id="customColors"
                                placeholder="#ff0000,#00ff00,#0000ff"
                                disabled
                                class="mt-2 w-full px-4 py-2 bg-secondary border border-border rounded-lg text-foreground focus:outline-none focus:ring-2 focus:ring-primary disabled:opacity-50"
                        />
                        <p class="text-xs text-muted-foreground mt-1">Enter comma-separated hex colors</p>
                    </div>

                    <!-- Eraser -->
                    <div>
                        <label class="flex items-center gap-2">
                            <input type="checkbox" id="eraserCheck" class="text-primary" />
                            <span class="text-foreground font-medium">Enable Eraser Tool</span>
                        </label>
                    </div>

                    <!-- Background Image -->
                    <div>
                        <label for="bgImageInput" class="block text-sm font-medium text-foreground mb-2">
                            Background Image URL
                        </label>
                        <input
                                type="url"
                                id="bgImageInput"
                                placeholder="https://example.com/image.jpg"
                                class="w-full px-4 py-2 bg-secondary border border-border rounded-lg text-foreground focus:outline-none focus:ring-2 focus:ring-primary"
                        />
                        <p class="text-xs text-muted-foreground mt-1">Optional: Add a background image</p>
                    </div>

                    <!-- Background Opacity -->
                    <div>
                        <label for="bgOpacityInput" class="block text-sm font-medium text-foreground mb-2">
                            Background Opacity (0-100)
                        </label>
                        <input
                                type="number"
                                id="bgOpacityInput"
                                min="0"
                                max="100"
                                value="50"
                                class="w-full px-4 py-2 bg-secondary border border-border rounded-lg text-foreground focus:outline-none focus:ring-2 focus:ring-primary"
                        />
                    </div>

                    <!-- Background Size -->
                    <div>
                        <label for="bgImageSizeInput" class="block text-sm font-medium text-foreground mb-2">
                            Background Size (10-200%)
                        </label>
                        <input
                                type="number"
                                id="bgImageSizeInput"
                                min="10"
                                max="200"
                                value="100"
                                class="w-full px-4 py-2 bg-secondary border border-border rounded-lg text-foreground focus:outline-none focus:ring-2 focus:ring-primary"
                        />
                    </div>

                    <!-- Hide Navbar -->
                    <div>
                        <label class="flex items-center gap-2">
                            <input type="checkbox" id="hideNavbarCheck" class="text-primary" />
                            <span class="text-foreground font-medium">Hide Navigation Bar</span>
                        </label>
                    </div>

                    <!-- Can Edit Size -->
                    <div>
                        <label class="flex items-center gap-2">
                            <input type="checkbox" id="canEditSizeCheck" checked class="text-primary" />
                            <span class="text-foreground font-medium">Allow Size Editing</span>
                        </label>
                    </div>

                    <!-- Grid Controls -->
                    <div class="border-t border-border pt-6">
                        <h3 class="text-lg font-semibold text-foreground mb-4">Grid Settings</h3>

                        <!-- Grid Enabled -->
                        <div class="mb-4">
                            <label class="flex items-center gap-2">
                                <input type="checkbox" id="gridEnabledCheck" class="text-primary" />
                                <span class="text-foreground font-medium">Enable Grid</span>
                            </label>
                        </div>

                        <!-- Grid Color -->
                        <div class="mb-4">
                            <label for="gridColorInput" class="block text-sm font-medium text-foreground mb-2">
                                Grid Color
                            </label>
                            <input
                                    type="color"
                                    id="gridColorInput"
                                    value="#cccccc"
                                    class="w-20 h-10 rounded border border-border"
                            />
                        </div>

                        <!-- Grid Opacity -->
                        <div class="mb-4">
                            <label for="gridOpacityInput" class="block text-sm font-medium text-foreground mb-2">
                                Grid Opacity (0-100)
                            </label>
                            <input
                                    type="number"
                                    id="gridOpacityInput"
                                    min="0"
                                    max="100"
                                    value="30"
                                    class="w-full px-4 py-2 bg-secondary border border-border rounded-lg text-foreground focus:outline-none focus:ring-2 focus:ring-primary"
                            />
                        </div>

                        <!-- Grid Style -->
                        <div class="mb-4">
                            <label for="gridStyleSelect" class="block text-sm font-medium text-foreground mb-2">
                                Grid Style
                            </label>
                            <select
                                    id="gridStyleSelect"
                                    class="w-full px-4 py-2 bg-secondary border border-border rounded-lg text-foreground focus:outline-none focus:ring-2 focus:ring-primary"
                            >
                                <option value="solid">Solid Lines</option>
                                <option value="dotted">Dotted</option>
                                <option value="dashed">Dashed</option>
                                <option value="sparse">Sparse Lines</option>
                            </select>
                        </div>

                        <!-- Grid Size -->
                        <div>
                            <label for="gridSizeInput" class="block text-sm font-medium text-foreground mb-2">
                                Grid Cell Size (10-100)
                            </label>
                            <input
                                    type="number"
                                    id="gridSizeInput"
                                    min="10"
                                    max="100"
                                    value="20"
                                    class="w-full px-4 py-2 bg-secondary border border-border rounded-lg text-foreground focus:outline-none focus:ring-2 focus:ring-primary"
                            />
                        </div>
                    </div>

                    <!-- Generate Button -->
                    <button
                            type="submit"
                            class="w-full px-6 py-3 bg-primary text-primary-foreground rounded-lg font-medium hover:opacity-90 transition-opacity"
                    >
                        Generate URL
                    </button>
                </form>
            </div>

            <!-- Generated URL -->
            <div id="resultSection" class="hidden bg-card border border-border rounded-lg p-6">
                <h2 class="text-xl font-bold text-foreground mb-4">Generated URL</h2>

                <div class="bg-secondary rounded-lg p-4 mb-4 overflow-x-auto">
                    <code id="generatedUrl" class="text-sm text-foreground break-all"></code>
                </div>

                <div class="flex gap-4">
                    <button
                            id="copyBtn"
                            class="px-6 py-2 bg-primary text-primary-foreground rounded-lg font-medium hover:opacity-90 transition-opacity"
                    >
                        Copy URL
                    </button>
                    <a
                            id="openBtn"
                            href="#"
                            target="_blank"
                            class="px-6 py-2 bg-secondary text-secondary-foreground rounded-lg font-medium hover:bg-accent transition-colors"
                    >
                        Open Canvas
                    </a>
                </div>
            </div>
        </div>
    </main>
</Layout>

<script>
    const form = document.getElementById('urlForm');
    const resultSection = document.getElementById('resultSection');
    const generatedUrlEl = document.getElementById('generatedUrl');
    const copyBtn = document.getElementById('copyBtn');
    const openBtn = document.getElementById('openBtn');
    const customColorsInput = document.getElementById('customColors');
    const colorModeRadios = document.querySelectorAll('input[name="colorMode"]');

    // Enable/disable custom colors input
    colorModeRadios.forEach(radio => {
        radio.addEventListener('change', (e) => {
            const target = e.target;
            customColorsInput.disabled = target.value === 'all';
        });
    });

    form.addEventListener('submit', (e) => {
        e.preventDefault();

        const size = (document.getElementById('sizeInput') as HTMLInputElement).value;
        const colorMode = (document.querySelector('input[name="colorMode"]:checked') as HTMLInputElement).value;
        const customColors = customColorsInput.value;
        const eraserEnabled = (document.getElementById('eraserCheck') as HTMLInputElement).checked;

        const bgImage = (document.getElementById('bgImageInput') as HTMLInputElement).value;
        const bgOpacity = (document.getElementById('bgOpacityInput') as HTMLInputElement).value;
        const bgImageSize = (document.getElementById('bgImageSizeInput') as HTMLInputElement).value;

        const hideNavbar = (document.getElementById('hideNavbarCheck') as HTMLInputElement).checked;
        const canEditSize = (document.getElementById('canEditSizeCheck') as HTMLInputElement).checked;
        const gridEnabled = (document.getElementById('gridEnabledCheck') as HTMLInputElement).checked;
        const gridColor = (document.getElementById('gridColorInput') as HTMLInputElement).value;
        const gridOpacity = (document.getElementById('gridOpacityInput') as HTMLInputElement).value;
        const gridStyle = (document.getElementById('gridStyleSelect') as HTMLInputElement).value;
        const gridSize = (document.getElementById('gridSizeInput') as HTMLInputElement).value;

        // Build URL parameters
        const params = new URLSearchParams();

        if (size && size !== '5') {
            params.append('size', size);
        }

        if (colorMode === 'all') {
            params.append('colors', '*');
        } else if (customColors) {
            params.append('colors', customColors);
        }

        if (eraserEnabled) {
            params.append('eraser', 'true');
        }

        if (bgImage) {
            params.append('bgImage', bgImage);
            if (bgOpacity && bgOpacity !== '50') {
                params.append('bgOpacity', bgOpacity);
            }
            if (bgImage && bgImageSize && bgImageSize !== '100') {
                params.append('bgImageSize', bgImageSize);
            }
        }

        // New parameters
        if (hideNavbar) {
            params.append('hideNavbar', 'true');
        }

        if (!canEditSize) {
            params.append('canEditSize', 'false');
        }

        if (gridEnabled) {
            params.append('gridEnabled', 'true');
            params.append('gridColor', encodeURIComponent(gridColor));
            if (gridOpacity && gridOpacity !== '30') {
                params.append('gridOpacity', gridOpacity);
            }
            if (gridStyle && gridStyle !== 'solid') {
                params.append('gridStyle', gridStyle);
            }
            if (gridSize && gridSize !== '20') {
                params.append('gridSize', gridSize);
            }
        }

        // Generate URL
        const baseUrl = window.location.origin + window.location.pathname.replace('/generate', '/');
        const fullUrl = params.toString() ? `${baseUrl}?${params.toString()}` : baseUrl;

        // Display result
        generatedUrlEl.textContent = fullUrl;
        openBtn.href = fullUrl;
        resultSection.classList.remove('hidden');

        // Scroll to result
        resultSection.scrollIntoView({ behavior: 'smooth' });
    });

    // Copy to clipboard
    copyBtn.addEventListener('click', async () => {
        const url = generatedUrlEl.textContent || '';
        try {
            await navigator.clipboard.writeText(url);
            copyBtn.textContent = 'Copied!';
            setTimeout(() => {
                copyBtn.textContent = 'Copy URL';
            }, 2000);
        } catch (err) {
            console.error('Failed to copy:', err);
        }
    });
</script>